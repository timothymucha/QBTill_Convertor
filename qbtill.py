# -*- coding: utf-8 -*-
"""QBTill.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kNAgWRrfZtbIHzWh3pX5FOVD19X2ta5T
"""

import streamlit as st
import pandas as pd
from io import StringIO

# Streamlit app title
st.title("Bank Statement → QuickBooks IIF Converter")
st.markdown("""
Upload your **CSV** bank statement. This tool will generate an `.IIF` file for QuickBooks Desktop using:
- `Mpesa Till` as the receiving account for customer payments
- `Sales Income` for sales revenue
- `Diamond Trust Bank` as the target for withdrawals (transfers)
""")

# Function to clean up column headers
def clean_column_names(df):
    df.columns = [col.strip().replace("\n", " ").replace("\r", "") for col in df.columns]
    return df

# Main function to convert CSV data to IIF format
def convert_to_iif(df):
    output = StringIO()
    # IIF headers
    output.write("!TRNS\tTRNSTYPE\tDATE\tACCNT\tNAME\tAMOUNT\tMEMO\n")
    output.write("!SPL\tTRNSTYPE\tDATE\tACCNT\tNAME\tAMOUNT\tMEMO\n")

    for _, row in df.iterrows():
        try:
            date = pd.to_datetime(row["Completion Time"]).strftime("%m/%d/%Y")
            memo = str(row["Details"]).strip()
            name = str(row.get("Other Party Info", "Unknown")).strip()

            # Handle Paid In (customer payments)
            if pd.notna(row["Paid In"]) and float(row["Paid In"]) > 0:
                amount = float(row["Paid In"])
                output.write(f"TRNS\tDEPOSIT\t{date}\tMpesa Till\t{name}\t{amount}\t{memo}\n")
                output.write(f"SPL\tDEPOSIT\t{date}\tSales Income\t{name}\t{-amount}\t{memo}\n")
                output.write("ENDTRNS\n")

            # Handle Withdrawn (transfer to DTB)
            elif pd.notna(row["Withdrawn"]) and float(row["Withdrawn"]) < 0:
                amount = abs(float(row["Withdrawn"]))
                output.write(f"TRNS\tTRANSFER\t{date}\tMpesa Till\t{name}\t{-amount}\t{memo}\n")
                output.write(f"SPL\tTRANSFER\t{date}\tDiamond Trust Bank\t{name}\t{amount}\t{memo}\n")
                output.write("ENDTRNS\n")

        except Exception as e:
            st.warning(f"Skipping row due to error: {e}")
            continue

    return output.getvalue()

# File uploader
uploaded_file = st.file_uploader("📁 Upload your bank statement (CSV only)", type=["csv"])

if uploaded_file:
    try:
        # Load and clean CSV
        df = pd.read_csv(uploaded_file)
        df = clean_column_names(df)

        st.success("✅ File uploaded successfully!")
        st.subheader("📄 Preview of your data:")
        st.dataframe(df.head())

        # Generate IIF content
        iif_content = convert_to_iif(df)

        # Download button
        st.download_button(
            label="⬇️ Download QuickBooks IIF",
            data=iif_content,
            file_name="bank_to_quickbooks.iif",
            mime="text/plain"
        )

    except Exception as e:
        st.error(f"❌ Error reading file: {e}")